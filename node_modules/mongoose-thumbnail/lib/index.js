(function() {
  var ObjectId, Schema, addSchemaField, addSchemaSubField, defaults, extend, filePlugin, filePluginLib, fs, im, is_callable, make_upload_to_model, mkdirp, mongoose, path, temp, thumbnailPlugin, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mongoose = require('mongoose');

  filePluginLib = require('mongoose-file');

  path = require('path');

  fs = require('fs');

  util = require('util');

  mkdirp = require('mkdirp');

  temp = require('temp');

  im = require('imagemagick');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  extend = function(dst, src) {
    var key, val;
    for (key in src) {
      val = src[key];
      dst[key] = val;
    }
    return dst;
  };

  defaults = function(dst, src) {
    var key, val;
    for (key in src) {
      val = src[key];
      if (!(key in dst)) {
        dst[key] = val;
      }
    }
    return dst;
  };

  addSchemaField = function(schema, pathname, fieldSpec) {
    var fieldSchema;
    fieldSchema = {};
    fieldSchema[pathname] = fieldSpec;
    return schema.add(fieldSchema);
  };

  addSchemaSubField = function(schema, masterPathname, subName, fieldSpec) {
    return addSchemaField(schema, "" + masterPathname + "." + subName, fieldSpec);
  };

  is_callable = function(f) {
    return typeof f === 'function';
  };

  filePlugin = filePluginLib.filePlugin;

  make_upload_to_model = filePluginLib.make_upload_to_model;

  thumbnailPlugin = function(schema, options) {
    var change_cb, do_save, format, modeInline, onChangeCbOrig, pathname, relative_to, size, thumb, thumb_prefix;
    if (options == null) {
      options = {};
    }
    onChangeCbOrig = options.change_cb || null;
    change_cb = function(pathname, newPath, oldPath) {
      var dst_thumb_path, im_resize_opts, image_path, instance, rel_thumb_path, thumb_basename, tmp_thumb_path,
        _this = this;
      if (onChangeCbOrig) {
        onChangeCbOrig.apply(this, arguments);
      }
      if (oldPath) {
        fs.unlink(oldPath, function(err) {
          if (err) {
            return console.log("An error happened removing file " + oldPath + ": " + err);
          }
        });
      }
      instance = this;
      image_path = newPath;
      thumb_basename = path.basename(image_path);
      if (__indexOf.call(thumb_basename, '.') >= 0) {
        thumb_basename = path.basename(thumb_basename, path.extname(thumb_basename));
      }
      thumb_basename = thumb_prefix + thumb_basename + ("." + format);
      tmp_thumb_path = temp.path({
        suffix: "." + format
      });
      dst_thumb_path = path.join(path.dirname(image_path), thumb_basename);
      rel_thumb_path = dst_thumb_path;
      if (relative_to) {
        if (is_callable(relative_to)) {
          rel_thumb_path = relative_to.call(this, {
            size: null,
            path: dst_thumb_path,
            name: thumb_basename,
            type: 'image/#{format}',
            hash: false,
            lastModifiedDate: new Date()
          });
        } else {
          rel_thumb_path = path.relative(relative_to, dst_thumb_path);
        }
      }
      console.log("Resizing " + image_path);
      im_resize_opts = {
        width: size,
        format: format,
        filter: 'Lanczos'
      };
      if (modeInline) {
        im_resize_opts.srcData = fs.readFileSync(image_path, 'binary');
      } else {
        im_resize_opts.srcPath = image_path;
        im_resize_opts.dstPath = tmp_thumb_path;
      }
      return im.resize(im_resize_opts, function(err, stdout, stderr) {
        if (err) {
          throw err;
        }
        if (modeInline) {
          _this.set("" + pathname + "." + thumb, ("data:image/" + format + ";base64,") + new Buffer(stdout, 'binary').toString('base64'));
          _this.markModified(pathname);
          if (do_save) {
            return _this.save();
          }
        } else {
          return fs.rename(tmp_thumb_path, dst_thumb_path, function(err) {
            if (err) {
              fs.unlink(tmp_thumb_path, function(err) {
                if (err) {
                  throw err;
                }
              });
              throw err;
            }
            _this.set("" + pathname + "." + thumb + ".name", thumb_basename);
            _this.set("" + pathname + "." + thumb + ".path", dst_thumb_path);
            _this.set("" + pathname + "." + thumb + ".rel", rel_thumb_path);
            _this.markModified(pathname);
            if (do_save) {
              return _this.save();
            }
          });
        }
      });
    };
    options.change_cb = change_cb;
    filePlugin(schema, options);
    pathname = options.name || 'file';
    thumb = options.thumb || 'thumb';
    format = options.format || 'jpg';
    size = options.size || 96;
    relative_to = options.thumb_relative_to || options.relative_to || null;
    thumb_prefix = options.thumb_prefix || "t_";
    do_save = true;
    if (options && (options.save != null)) {
      do_save = options.save;
    }
    modeInline = false;
    if (options && (options.inline != null)) {
      modeInline = options.inline;
    }
    if (modeInline) {
      return addSchemaSubField(schema, pathname, thumb, {
        type: String,
        "default": function() {
          return null;
        }
      });
    } else {
      addSchemaSubField(schema, pathname, thumb, {});
      addSchemaSubField(schema, pathname, "" + thumb + ".name", {
        type: String,
        "default": function() {
          return null;
        }
      });
      addSchemaSubField(schema, pathname, "" + thumb + ".path", {
        type: String,
        "default": function() {
          return null;
        }
      });
      return addSchemaSubField(schema, pathname, "" + thumb + ".rel", {
        type: String,
        "default": function() {
          return null;
        }
      });
    }
  };

  module.exports = {
    thumbnailPlugin: thumbnailPlugin,
    filePlugin: filePlugin,
    make_upload_to_model: make_upload_to_model
  };

}).call(this);
